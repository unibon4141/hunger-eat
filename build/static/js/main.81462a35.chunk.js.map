{"version":3,"sources":["App.js","index.js"],"names":["api_id","a","urls","cnt","dupCnt","fetch","response","json","data","i","length","image","push","Loading","className","Image","props","src","alt","foodType","Gallery","map","url","photos","photo","d","url_c","slice","RamenPage","useState","setUrls","useEffect","fetchRamenImages","then","PizzaPage","fetchPizzaImages","SteakPage","fetchSteakImages","App","to","id","path","exact","href","render","document","querySelector"],"mappings":"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","file":"static/js/main.81462a35.chunk.js","sourcesContent":["// useState:コンポーネントの状態を管理できる。\r\nimport { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nconst api_id = \"4f5844d2e0d6164077719809278ad2fe\";\r\nasync function fetchPizzaImages() {\r\n  const urls = [];\r\n  let cnt = 0;\r\n  while (cnt < 9) {\r\n    let dupCnt = 0;\r\n    // awaitをつけると実行が終わるまで待ってくれる\r\n    const response = await fetch(\r\n      `https://foodish-api.herokuapp.com/api/images/pizza`\r\n    )\r\n\r\n    // jsonとして読み込む\r\n    const data = await response.json();\r\n    for (let i = 0; i < urls.length; i++) {\r\n      if (urls[i] === data.image) {\r\n        dupCnt++;\r\n      }\r\n    }\r\n    if (!dupCnt) {\r\n      cnt++;\r\n      urls.push(data.image);\r\n    }\r\n\r\n  }\r\n  return urls;\r\n}\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <header>\r\n          <div className=\"container\">\r\n            <h1>食欲を満たすサイト</h1>\r\n          </div>\r\n          <nav>\r\n            <Link className=\"\" to=\"/pizza\">\r\n              ピザ\r\n        </Link>\r\n            <Link className=\"\" to=\"/ramen\">\r\n              ラーメン\r\n        </Link>\r\n            <Link className=\"\" to=\"/steak\">\r\n              肉\r\n        </Link>\r\n          </nav>\r\n        </header>\r\n        <main id=\"main\">\r\n          <div className=\"container cards\">\r\n            {/* Swithコンポーネント：URLによって切り替わる要素の場所を設定 */}\r\n            <Switch>\r\n              <Route path=\"/\" exact>\r\n                <PizzaPage />\r\n              </Route>\r\n              <Route path=\"/ramen\">\r\n                <RamenPage />\r\n              </Route>\r\n              <Route path=\"/pizza\">\r\n                <PizzaPage />\r\n              </Route>\r\n              <Route path=\"/steak\">\r\n                <SteakPage />\r\n              </Route>\r\n            </Switch >\r\n          </div>\r\n        </main>\r\n        <footer id=\"footer\">\r\n          このサイトでは<a href=\"https://github.com/surhud004/Foodish#readme\">Foodish API</a>, <a href=\"https://www.flickr.com/services/api/\">Flickr API</a>を利用しています。\r\n    </footer>\r\n      </div>\r\n    </Router>\r\n  );\r\n\r\n}\r\nfunction Loading() {\r\n  return (\r\n    <div>\r\n      <p className=\"loading\">\r\n        Loading...\r\n    </p>\r\n    </div>\r\n  )\r\n};\r\n\r\nfunction Image(props) {\r\n  return (\r\n    <div key={props.src} className=\"card\">\r\n      <div className=\"card-image\">\r\n        <img src={props.src} alt=\"food\" className={`${props.foodType} food-item`} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nfunction Gallery(props) {\r\n  // 分割代入\r\n  const { urls } = props;\r\n  const { foodType } = props;\r\n  if (urls === null) {\r\n    return <Loading />\r\n  }\r\n  return (\r\n    urls.map((url) => {\r\n      return (\r\n\r\n        <Image src={url} foodType={foodType} />\r\n\r\n      )\r\n    })\r\n\r\n  )\r\n}\r\nasync function fetchRamenImages() {\r\n  const urls = [];\r\n  let cnt = 0;\r\n  // awaitをつけると実行が終わるまで待ってくれる\r\n  const response = await fetch(\r\n    `https://api.flickr.com/services/rest?api_key=${api_id}&method=flickr.photos.search&format=json&nojsoncallback=1&extras=url_c,date_taken.original_format&tags=ramen&user_id=41665184%40N08`\r\n  );\r\n\r\n  // jsonとして読み込む\r\n  const data = await response.json();\r\n\r\n  data.photos.photo.map((d) => {\r\n    urls.push(d.url_c);\r\n  });\r\n\r\n  return urls.slice(0, 9);\r\n}\r\nasync function fetchSteakImages() {\r\n  const urls = [];\r\n  let cnt = 0;\r\n  // awaitをつけると実行が終わるまで待ってくれる\r\n  const response = await fetch(\r\n    `https://api.flickr.com/services/rest?api_key=${api_id}&method=flickr.photos.search&format=json&nojsoncallback=1&extras=url_c,date_taken&tags=wagyu&user_id=78797573%40N00`\r\n  );\r\n  // jsonとして読み込む\r\n  const data = await response.json();\r\n  data.photos.photo.map((d) => {\r\n    urls.push(d.url_c);\r\n  });\r\n  return urls.slice(0, 9);\r\n}\r\n\r\nfunction RamenPage() {\r\n  let [urls, setUrls] = useState(null);\r\n  useEffect(() => {\r\n\r\n    fetchRamenImages().then((url) => {\r\n      urls = url;\r\n      setUrls(urls);\r\n    })\r\n  }, [])\r\n  return <Gallery urls={urls} foodType=\"ramen\" />;\r\n}\r\n\r\nfunction PizzaPage() {\r\n\r\n\r\n  let [urls, setUrls] = useState(null);\r\n  useEffect(() => {\r\n\r\n    fetchPizzaImages().then((url) => {\r\n      urls = url;\r\n\r\n      setUrls(urls);\r\n    })\r\n  }, [])\r\n  return <Gallery urls={urls} foodType=\"pizza\" />;\r\n}\r\n\r\nfunction SteakPage() {\r\n\r\n\r\n  let [urls, setUrls] = useState(null);\r\n  useEffect(() => {\r\n\r\n    fetchSteakImages().then((url) => {\r\n      urls = url;\r\n      setUrls(urls);\r\n    })\r\n  }, [])\r\n  return <Gallery urls={urls} foodType=\"steak\" />;\r\n}\r\n\r\nexport default App;","import { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nrender(<App />, document.querySelector(\"#content\"));\r\n"],"sourceRoot":""}